{"version":3,"sources":["../../src/common/rjsOptimizer.js"],"names":["args","requirejsDev","readFileSync","resolve","bowerCfg","JSON","parse","requirejsDevCfg","runInNewContext","mergedPaths","Object","assign","paths","keys","forEach","f","replace","directory","ls","filter","e","indexOf","include","push","optimize","out","baseUrl","name","insertRequire","shim","bundles","rjsOptimizer","cfg","Promise","reject","output","success","console","log","err"],"mappings":";;;;;;;yDA4BA,iBAA4BA,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,oCAFV,GAEyB,aAAGC,YAAH,CAAgB,eAAKC,OAAL,CAAa,2BAAb,CAAhB,CAFzB;AAGUC,gCAHV,GAGsBC,KAAKC,KAAL,CAAW,aAAGJ,YAAH,CAAgB,eAAKC,OAAL,CAAa,UAAb,CAAhB,CAAX,CAHtB;AAKQI,uCALR,GAK0B,aAAGC,eAAH,CAAuBP,YAAvB,eAL1B;AAOQQ,mCAPR,GAOsBC,OAAOC,MAAP,CAAc,qBAAgBC,KAA9B,EAAqCL,gBAAgBK,KAArD,CAPtB;;AAQIF,+BAAOG,IAAP,CAAYJ,WAAZ,EACKK,OADL,CACa,aAAG;AACRL,wCAAYM,CAAZ,IAAiBN,YAAYM,CAAZ,EAAeC,OAAf,CAAuB,eAAvB,UAA8CZ,SAASa,SAAvD,CAAjB;AACH,yBAHL;;AAKA,0CAAMC,EAAN,CAAS,cAAT,EACKC,MADL,CACY;AAAA,mCAAKC,EAAEC,OAAF,CAAU,eAAV,IAA2B,CAAhC;AAAA,yBADZ,EAEKF,MAFL,CAEY;AAAA,mCAAKC,EAAEC,OAAF,CAAU,mBAAV,IAA+B,CAApC;AAAA,yBAFZ,EAGKP,OAHL,CAGa,aAAG;AACR,iDAAgBQ,OAAhB,CAAwBC,IAAxB,CAA6BR,EAAEC,OAAF,CAAU,OAAV,EAAkB,EAAlB,EAAsBA,OAAtB,CAA8B,KAA9B,EAAoC,EAApC,CAA7B;AACH,yBALL;;AAbJ;AAAA,+BAoBUQ,SAAS;AACXC,iCAAK,mBADM;AAEXC,qCAAS,QAFE;AAGXC,kCAAM,aAHK;AAIXf,mCAAOH,WAJI;AAKXa,qCAAS,qBAAgBA,OALd;AAMXM,2CAAe,CAAC,aAAD,CANJ;AAOXC,kCAAMtB,gBAAgBsB,IAPX;AAQXC,qCAAS;AARE,yBAAT,CApBV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;AA5Bf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAIP,WAAW,SAAXA,QAAW,CAASQ,GAAT,EAAa;AACxB,WAAO,IAAIC,OAAJ,CAAY,UAAC9B,OAAD,EAAU+B,MAAV,EAAmB;AAClCF,YAAIG,MAAJ,GAAahC,OAAb;AACA,YAAI;AACA,gCAAQqB,QAAR,CACIQ,GADJ,EAEI,UAAUI,OAAV,EAAmB;AACfC,wBAAQC,GAAR,CAAYF,OAAZ;AACAjC,wBAAQiC,OAAR;AACH,aALL,EAMI,UAAUG,GAAV,EAAe;AACXL,uBAAOK,GAAP;AACH,aARL;AASH,SAVD,CAUE,OAAOnB,CAAP,EAAU;AACRc,mBAAOd,CAAP;AACH;AAEJ,KAhBM,CAAP;AAiBH,CAlBD;;kBAsDeW,Y","file":"rjsOptimizer.js","sourcesContent":["import shell from 'shelljs'\nimport require from 'requirejs'\nimport path from 'path'\nimport fs from 'fs'\nimport vm from 'vm'\n\nimport {requireJsConfig} from '../config/rjs'\n\nlet optimize = function(cfg){\n    return new Promise((resolve, reject)=>{\n        cfg.output = resolve\n        try {\n            require.optimize(\n                cfg,\n                function (success) {\n                    console.log(success)\n                    resolve(success)\n                },\n                function (err) {\n                    reject(err)\n                })\n        } catch (e) {\n            reject(e)\n        }\n\n    })\n}\n\nasync function rjsOptimizer(args) {\n\n    const requirejsDev = fs.readFileSync(path.resolve('src/app/require.config.js'))\n    const bowerCfg =  JSON.parse(fs.readFileSync(path.resolve('.bowerrc')))\n\n    let requirejsDevCfg = vm.runInNewContext( `${requirejsDev}; require`)\n\n    let mergedPaths = Object.assign(requireJsConfig.paths, requirejsDevCfg.paths)\n    Object.keys(mergedPaths)\n        .forEach(f=>{\n            mergedPaths[f] = mergedPaths[f].replace('bower_modules', `../${bowerCfg.directory}`)\n        })\n\n    shell.ls('temp/**/*.js')\n        .filter(e => e.indexOf('bower_modules')<0 )\n        .filter(e => e.indexOf('require.config.js')<0 )\n        .forEach(f=>{\n            requireJsConfig.include.push(f.replace(\"temp/\",\"\").replace(\".js\",\"\"))\n        })\n\n    await optimize({\n        out: './temp/scripts.js',\n        baseUrl: './temp',\n        name: 'app/startup',\n        paths: mergedPaths,\n        include: requireJsConfig.include,\n        insertRequire: ['app/startup'],\n        shim: requirejsDevCfg.shim,\n        bundles: {}\n    })\n}\n\n\n\nexport default rjsOptimizer"]}