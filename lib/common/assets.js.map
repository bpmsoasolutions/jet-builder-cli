{"version":3,"sources":["../../src/common/assets.js"],"names":["css","output","run","copyFolders","faCss","fs","readFileSync","replace","fontAwesome","args","split","process","argv","slice","length","minize","indexOf","bowerModules","exec","resolve","silent","ShellString","to","assets"],"mappings":";;;;;;;yDAKA,iBAA2BA,GAA3B,EAAgCC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACUC,IAAIC,WAAJ,4CAAyDF,MAAzD,YADV;;AAAA;AAGQG,6BAHR,GAGgBC,GAAGC,YAAH,CAAgB,qDAAhB,EAAuE,OAAvE,CAHhB;;AAIIF,gCAAQA,MAAMG,OAAN,CAAc,yBAAd,EAAyC,cAAzC,CAAR;;AAEAP,+BAAOI,KAAP;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,W;;;;;;0DASf,kBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,+BAAQA,IAAD,GAASA,KAAKC,KAAL,CAAW,GAAX,CAAT,GAA2BC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBF,QAAQC,IAAR,CAAaE,MAAnC,CAAlC;;AAEIb,8BAHR,GAGkBQ,KAAK,CAAL,CAAD,GAAYA,KAAK,CAAL,CAAZ,GAAsB,MAHvC;AAIQM,8BAJR,GAIkBN,KAAKO,OAAL,CAAa,IAAb,IAAqB,CAAC,CAJxC;AAKQC,oCALR,GAKwBR,KAAKO,OAAL,CAAa,iBAAb,IAAkC,CAAC,CAL3D;;AAOI;;AACIhB,2BARR,GAQc,kBAAMkB,IAAN,wBAAyB,eAAKC,OAAL,CAAa,sBAAb,CAAzB,EAAiE,EAACC,QAAQ,IAAT,EAAjE,CARd;;AAUI;;AAVJ,6BAWQH,YAXR;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAYcT,YAAYR,GAAZ,EAAiBC,MAAjB,CAZd;;AAAA;;AAeI,4BAAIc,MAAJ,EAAW;AACP,8CAAMM,WAAN,CAAkBrB,GAAlB,EACKkB,IADL,mBACqB,EAACE,QAAQ,IAAT,EADrB,EAEKE,EAFL,CAEWrB,MAFX;AAGH,yBAJD,MAIO;AACH,8CAAMoB,WAAN,CAAkBrB,GAAlB,EACKsB,EADL,CACWrB,MADX;AAEH;;AAtBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAesB,M;;;;;AAdf;;;;AACA;;;;AAEA;;;;;;kBAoCeA,M","file":"assets.js","sourcesContent":["import path from 'path'\nimport shell from 'shelljs'\n\nimport {pwd, uglifyPwd, sassPwd} from '../index'\n\nasync function fontAwesome(css, output){\n    await run(copyFolders, `src/bower_modules/font-awesome/fonts ${output}/fonts`)\n\n    let faCss = fs.readFileSync('src/bower_modules/font-awesome/css/font-awesome.css', 'utf-8')\n    faCss = faCss.replace(/url\\((')?\\.\\.\\/fonts\\//g, 'url($1fonts/')\n\n    css += faCss\n}\n\nasync function assets(args) {\n    args = (args) ? args.split(' ') : process.argv.slice(3, process.argv.length)\n\n    let output = (args[0]) ? args[0] : 'temp'\n    let minize = (args.indexOf('-m') > -1)\n    let bowerModules = (args.indexOf('--bower-modules') > -1)\n\n    //Parse scss\n    let css = shell.exec(`${sassPwd} ${path.resolve('src/scss/styles.scss')}`, {silent: true})\n\n    //Join css and other assets bower_module tasks\n    if (bowerModules){\n        await fontAwesome(css, output)\n    }\n\n    if (minize){\n        shell.ShellString(css)\n            .exec(uglifyPwd, {silent: true})\n            .to(`${output}/styles.css`)\n    } else {\n        shell.ShellString(css)\n            .to(`${output}/styles.css`)\n    }\n}\n\nexport default assets;"]}