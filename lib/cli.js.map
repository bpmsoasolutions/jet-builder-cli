{"version":3,"sources":["../src/cli.js"],"names":["pkg","require","header","version","main","notify","description","command","action","cmd","options","localTool","resolve","globalTool","__dirname","m","default","error","e","console","stack","log","process","exit","catch","err","ls","join","map","p","f","split","slice","length","parse","argv","args","help"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQ,iBAAR,CAAZ;AACA,IAAMC,SAAU,OACA,wEADA,GAEA,wEAFA,GAGA,wEAHA,GAIA,wEAJA,GAKA,wEALA,kBAMYF,IAAIG,OANhB,CAAhB;;AAQO,IAAMC,sBAAO,SAAPA,IAAO,GAAU;AAC1B,kCAAe,EAACJ,QAAD,EAAf,EAAsBK,MAAtB;;AAEA,wBACKF,OADL,CACaH,IAAIG,OADjB,EAEKG,WAFL,CAEiBJ,MAFjB;;AAIA,wBACKK,OADL,CACa,WADb,EAEKD,WAFL,CAEiB,0BAFjB,EAGKE,MAHL,CAGY,UAASC,GAAT,EAAcC,OAAd,EAAsB;AAC1B,YAAIC,YAAY,eAAKC,OAAL,WAAqBH,GAArB,SAAhB;AACA,YAAII,aAAa,eAAKD,OAAL,CAAaE,SAAb,iBAAqCL,GAArC,SAAjB;AACA,YAAIM,UAAJ;;AAEA,YAAI;AACAA,gBAAId,QAAQU,SAAR,EAAmBK,OAAvB;AACH,SAFD,CAEE,OAAMC,KAAN,EAAa;AACX,gBAAI;AACAF,oBAAId,QAAQY,UAAR,EAAoBG,OAAxB;AACH,aAFD,CAEE,OAAME,CAAN,EAAS;AACPC,wBAAQF,KAAR,CAAcC,EAAEE,KAAhB;AACAD,wBAAQE,GAAR,oBAA6BJ,KAA7B;AACAE,wBAAQE,GAAR,mBAA4BH,CAA5B;AACAC,wBAAQE,GAAR,CAAY,4CAAZ;AACAC,wBAAQC,IAAR,CAAa,CAAb;AACH;AACJ;;AAED,eAAO,mBAAIR,CAAJ,EACFS,KADE,CACI,eAAO;AAAEL,oBAAQF,KAAR,CAAcQ,IAAIL,KAAlB,EAA0BE,QAAQC,IAAR,CAAa,CAAb;AAAiB,SADxD,CAAP;AAEH,KAxBL;;AA0BA,wBACKhB,OADL,CACa,MADb,EAEKD,WAFL,CAEiB,2BAFjB,EAGKE,MAHL,CAGY,UAASC,GAAT,EAAcC,OAAd,EAAsB;AAC1BS,gBAAQE,GAAR,CAAYnB,MAAZ;AACAiB,gBAAQE,GAAR;AACA,0BAAMK,EAAN,MAAY,eAAKC,IAAL,CAAUb,SAAV,EAAqB,cAArB,CAAZ,EACKc,GADL,CACS,aAAG;AACJ,gBAAIC,IAAIC,EAAEC,KAAF,CAAQ,GAAR,CAAR;AACAZ,oBAAQE,GAAR,SAAkBQ,EAAEG,KAAF,CAAQH,EAAEI,MAAF,GAAS,CAAjB,EAAoBJ,EAAEI,MAAtB,CAAlB;AACH,SAJL;AAKH,KAXL;;AAaA,wBAAQC,KAAR,CAAcZ,QAAQa,IAAtB;AACA,QAAI,CAAC,oBAAQC,IAAR,CAAaH,MAAlB,EAA0B,oBAAQI,IAAR;AAC7B,CAhDM","file":"cli.js","sourcesContent":["import path from 'path'\nimport program from 'commander'\nimport run from './common/run'\nimport shell from 'shelljs'\nimport updateNotifier from 'update-notifier'\n\nconst pkg = require('../package.json')\nconst header =  '\\n'+\n                '    __ _____             _     _      _       _ _   _ _           _ \\n'+\n                ' __|  | __  |   ___     |_|___| |_   | |_ _ _|_| |_| | |_ ___ ___| |\\n'+\n                '|  |  | __ -|  |___|    | | -_|  _|  | . | | | | | . |  _| . | . | |\\n'+\n                '|_____|_____|          _| |___|_|    |___|___|_|_|___|_| |___|___|_|\\n'+\n                '                      |___|                                         \\n'+\n                `Version: ${pkg.version}`\n\nexport const main = function(){\n    updateNotifier({pkg}).notify()\n\n    program\n        .version(pkg.version)\n        .description(header)\n\n    program\n        .command('run <cmd>')\n        .description('Execute the given script')\n        .action(function(cmd, options){\n            let localTool = path.resolve(`tool/${cmd}.js`)\n            let globalTool = path.resolve(__dirname, `./scripts/${cmd}.js`)\n            let m\n\n            try {\n                m = require(localTool).default\n            } catch(error) {\n                try {\n                    m = require(globalTool).default\n                } catch(e) {\n                    console.error(e.stack)\n                    console.log(`Warn: project ${error}`)\n                    console.log(`Warn: global ${e}`)\n                    console.log('Neither local/modules task found...exiting')\n                    process.exit(0)\n                }\n            }\n\n            return run(m)\n                .catch(err => { console.error(err.stack); process.exit(1) })\n        })\n\n    program\n        .command('list')\n        .description('List of available scripts')\n        .action(function(cmd, options){\n            console.log(header)\n            console.log(`Scripts list:`)\n            shell.ls(`${path.join(__dirname, 'scripts/*.js')}`)\n                .map(f=>{\n                    let p = f.split('/')\n                    console.log(` - ${p.slice(p.length-1, p.length)}`)\n                })\n        })\n\n    program.parse(process.argv)\n    if (!program.args.length) program.help()\n}"]}