{"version":3,"sources":["../../src/cordova/compile.js"],"names":["args","split","process","argv","slice","length","indexOf","push","cd","exec","resolve","join","compile"],"mappings":";;;;;;AAGA;;;yDAEA,iBAAuBA,IAAvB;AAAA;AAAA;AAAA;AAAA;AACIA,+BAAQA,IAAD,GAASA,KAAKC,KAAL,CAAW,GAAX,CAAT,GAA2BC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBF,QAAQC,IAAR,CAAaE,MAAnC,CAAlC;;AAEA,4BAAIL,KAAKM,OAAL,CAAa,SAAb,IAA0B,CAA9B,EAAiC;AAC7BN,iCAAKO,IAAL,CAAU,SAAV;AACH;;AAED,0CAAMC,EAAN,CAAS,KAAT;AACA,0CAAMC,IAAN,CAAc,eAAKC,OAAL,CAAa,2BAAb,CAAd,iBAAmEV,KAAKW,IAAL,CAAU,GAAV,CAAnE;AACA,0CAAMH,EAAN,CAAS,IAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,O;;;;;AALf;;;;AACA;;;;;;;;kBAgBeA,O","file":"compile.js","sourcesContent":["import shell from 'shelljs'\nimport path from 'path'\n\n// $ compile --build-config='' --release --target=''\n\nasync function compile(args) {\n    args = (args) ? args.split(' ') : process.argv.slice(3, process.argv.length)\n\n    if (args.indexOf('release') < 0) {\n        args.push('--debug')\n    }\n\n    shell.cd('app')\n    shell.exec(`${path.resolve('node_modules/.bin/cordova')} compile ${args.join(' ')}`);\n    shell.cd('..')\n}\n\nexport default compile;\n\n\n"]}