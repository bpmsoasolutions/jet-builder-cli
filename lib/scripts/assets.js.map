{"version":3,"sources":["../../src/scripts/assets.js"],"names":["css","output","Promise","resolve","reject","faCss","readFileSync","replace","fontAwesome","file","render","err","result","renderSass","args","split","process","argv","slice","length","minize","indexOf","bowerModules","ShellString","exec","to","assets"],"mappings":";;;;;;;yDASA,iBAA2BA,GAA3B,EAAgCC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACU,mFAAyDA,MAAzD,mBADV;;AAAA;AAAA,yDAEW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,gCAAIC,QAAQ,aAAGC,YAAH,CAAgB,qDAAhB,EAAuE,OAAvE,CAAZ;AACAD,oCAAQA,MAAME,OAAN,CAAc,yBAAd,EAAyC,qBAAzC,CAAR;;AAEAP,mCAAOK,KAAP;AACAF,oCAAQH,GAAR;AACH,yBANM,CAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeQ,W;;;;;;0DAWf,kBAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,0DACW,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,+CAAKM,MAAL,CAAY;AACRD,sCAAMA;AADE,6BAAZ,EAEG,UAASE,GAAT,EAAcC,MAAd,EAAsB;AACrB,oCAAID,GAAJ,EAAQ;AACJP,2CAAOO,GAAP;AACH;AACDR,wCAAQS,MAAR;AACH,6BAPD;AAQH,yBATM,CADX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,U;;;;;;0DAaf,kBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,+BAAQA,IAAD,GAASA,KAAKC,KAAL,CAAW,GAAX,CAAT,GAA2BC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBF,QAAQC,IAAR,CAAaE,MAAnC,CAAlC;;AAEIlB,8BAHR,GAGkBa,KAAK,CAAL,CAAD,GAAYA,KAAK,CAAL,CAAZ,GAAsB,MAHvC;AAIQM,8BAJR,GAIkBN,KAAKO,OAAL,CAAa,IAAb,IAAqB,CAAC,CAJxC;AAKQC,oCALR,GAKwBR,KAAKO,OAAL,CAAa,iBAAb,IAAkC,CAAC,CAL3D;;AAOI;AACA;;AARJ;AAAA,+BASoBR,WAAW,eAAKV,OAAL,CAAa,sBAAb,CAAX,CATpB;;AAAA;AASQH,2BATR;;AAAA,6BAYQsB,YAZR;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAaoBd,YAAYR,GAAZ,EAAiBC,MAAjB,CAbpB;;AAAA;AAaQD,2BAbR;;AAAA;;AAgBI,4BAAIoB,MAAJ,EAAW;AACP,8CAAMG,WAAN,CAAkBvB,GAAlB,EACKwB,IADL,mBAEKC,EAFL,CAEWxB,MAFX;AAGH,yBAJD,MAIO;AACH,8CAAMsB,WAAN,CAAkBvB,GAAlB,EACKyB,EADL,CACWxB,MADX;AAEH;;AAvBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeyB,M;;;;;AAjCf;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;;;;;kBAoDeA,M","file":"assets.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport shell from 'shelljs'\nimport sass from 'node-sass'\n\n\n\nimport run, {pwd, uglifyPwd, sassPwd, copyFolders} from '../index'\n\nasync function fontAwesome(css, output){\n    await run(copyFolders, `src/bower_modules/font-awesome/fonts ${output}/assets/fonts`)\n    return new Promise((resolve, reject)=>{\n        let faCss = fs.readFileSync('src/bower_modules/font-awesome/css/font-awesome.css', 'utf-8')\n        faCss = faCss.replace(/url\\((')?\\.\\.\\/fonts\\//g, 'url($1assets/fonts/')\n\n        css += faCss\n        resolve(css)\n    })\n}\n\nasync function renderSass(file){\n    return new Promise((resolve, reject)=>{\n        sass.render({\n            file: file\n        }, function(err, result) {\n            if (err){\n                reject(err)\n            }\n            resolve(result)\n        });\n    })\n}\n\nasync function assets(args) {\n    args = (args) ? args.split(' ') : process.argv.slice(3, process.argv.length)\n\n    let output = (args[0]) ? args[0] : 'temp'\n    let minize = (args.indexOf('-m') > -1)\n    let bowerModules = (args.indexOf('--bower-modules') > -1)\n\n    //Parse scss\n    //let css = shell.exec(`${sassPwd} ${path.resolve('src/scss/styles.scss')}`)\n    let css = await renderSass(path.resolve('src/scss/styles.scss'))\n\n    //Join css and other assets bower_module tasks\n    if (bowerModules){\n        css = await fontAwesome(css, output)\n    }\n\n    if (minize){\n        shell.ShellString(css)\n            .exec(uglifyPwd)\n            .to(`${output}/styles.css`)\n    } else {\n        shell.ShellString(css)\n            .to(`${output}/styles.css`)\n    }\n}\n\nexport default assets"]}