{"version":3,"sources":["../../src/utils/copyByFound.js"],"names":["args","split","process","argv","slice","length","files","ls","filter","e","indexOf","forEach","copyWithPath","f","copyByFound","filePath","sourceBase","destinationBase","arrFullyPath","replace","destArrPath","destPath","join","test","reduce","last","actual","index","arr","push","mkdir","cp"],"mappings":";;;;;;AAuBA;;;yDAEA,iBAA2BA,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACIA,+BAAQA,IAAD,GAASA,KAAKC,KAAL,CAAW,GAAX,CAAT,GAA2BC,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,EAAsBF,QAAQC,IAAR,CAAaE,MAAnC,CAAlC;;AAEIC,6BAHR,GAGgB,kBAAMC,EAAN,CAASP,KAAK,CAAL,CAAT,CAHhB;;;AAKI,4BAAIA,KAAK,CAAL,CAAJ,EAAY;AACRM,kCAAME,MAAN,CAAa;AAAA,uCAAKC,EAAEC,OAAF,CAAUV,KAAK,CAAL,CAAV,IAAmB,CAAxB;AAAA,6BAAb;AACH;;AAEDM,8BACKK,OADL,CACa,aAAG;AACR,mCAAOC,aAAaC,CAAb,EAAgBb,KAAK,CAAL,CAAhB,EAAyBA,KAAK,CAAL,CAAzB,CAAP;AACH,yBAHL;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAec,W;;;;;AAzBf;;;;;;;;AAEA,IAAMF,eAAe,SAAfA,YAAe,CAASG,QAAT,EAAmBC,UAAnB,EAA+BC,eAA/B,EAA+C;AAChE,QAAIC,eAAeH,SAASI,OAAT,CAAiBH,UAAjB,EAA6BC,eAA7B,EAA8ChB,KAA9C,CAAoD,GAApD,CAAnB;AACA,QAAImB,cAAcF,aAAad,KAAb,CAAmB,CAAnB,EAAsBc,aAAab,MAAb,GAAoB,CAA1C,CAAlB;AACA,QAAIgB,WAAWD,YAAYE,IAAZ,CAAiB,GAAjB,CAAf;;AAEA,QAAI,CAAC,kBAAMC,IAAN,CAAW,IAAX,EAAiBF,QAAjB,CAAL,EAAgC;AAC5BD,oBAAYI,MAAZ,CAAmB,UAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,EAAsBC,GAAtB,EAA8B;AAC7CH,iBAAKI,IAAL,CAAUH,MAAV;;AAEA,gBAAI,kBAAMH,IAAN,CAAW,IAAX,EAAiBE,KAAKH,IAAL,CAAU,GAAV,CAAjB,CAAJ,EAAqC;AACjC,uBAAOG,IAAP;AACH;;AAED,8BAAMK,KAAN,CAAYL,KAAKH,IAAL,CAAU,GAAV,CAAZ;AACA,mBAAOG,IAAP;AACH,SATD,EASE,EATF;AAUH;;AAED,WAAO,kBAAMM,EAAN,CAAS,KAAT,EAAgBhB,QAAhB,EAA0BM,QAA1B,CAAP;AACH,CAnBD,C,kBAsCeP,W","file":"copyByFound.js","sourcesContent":["import shell from 'shelljs'\n\nconst copyWithPath = function(filePath, sourceBase, destinationBase){\n    let arrFullyPath = filePath.replace(sourceBase, destinationBase).split('/')\n    let destArrPath = arrFullyPath.slice(0, arrFullyPath.length-1)\n    let destPath = destArrPath.join('/')\n\n    if (!shell.test('-e', destPath)){\n        destArrPath.reduce((last, actual, index, arr) => {\n            last.push(actual)\n\n            if (shell.test('-e', last.join('/'))){\n                return last\n            }\n\n            shell.mkdir(last.join('/'))\n            return last\n        },[])\n    }\n\n    return shell.cp('-Rf', filePath, destPath)\n}\n\n// $ copyByFound [regex to find] [source base] [destination base] [regex to omit files found]\n\nasync function copyByFound(args) {\n    args = (args) ? args.split(' ') : process.argv.slice(3, process.argv.length)\n\n    let files = shell.ls(args[0])\n\n    if (args[3]){\n        files.filter(e => e.indexOf(args[3])<0 )\n    }\n\n    files\n        .forEach(f=>{\n            return copyWithPath(f, args[1], args[2])\n        })\n}\n\nexport default copyByFound\n"]}